/* Generated By:JavaCC: Do not edit this line. Parser.java */
        import java.util.LinkedList;
        public class Parser implements ParserConstants {

  static final public Absyn.Program Program() throws ParseException {
//  Absyn.ClassDecl cd; 
//  Absyn.ThreadDecl td;
//  Absyn.MainClassDecl mcd;
  LinkedList<Absyn.ClassDecl> cds = new LinkedList<Absyn.ClassDecl>();
    MainClassDecl(cds);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 33:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 33:
        ClassDecl(cds);
        break;
        ThreadDecl(cds);
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(0);
    {if (true) return new Absyn.Program(cds);}
    throw new Error("Missing return statement in function");
  }

  static final public void MainClassDecl(LinkedList<Absyn.ClassDecl> cl) throws ParseException {
  Token name = null; parent = null;
  Absyn.VarDecl vd;
  LinkedList<Absyn.VarDecl> vds = new LinkedList<Absyn.VarDecl>();
  Absyn.Stmt st;
  LinkedList<Absyn.Stmt> sts = new LinkedList<Absyn.Stmt>();
    jj_consume_token(33);
    name = jj_consume_token(ID);
    jj_consume_token(20);
    jj_consume_token(65);
    jj_consume_token(67);
    jj_consume_token(79);
    jj_consume_token(53);
    jj_consume_token(6);
    jj_consume_token(69);
    jj_consume_token(18);
    jj_consume_token(19);
    jj_consume_token(ID);
    jj_consume_token(7);
    jj_consume_token(20);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 30:
      case 49:
      case ID:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      vd = VarDecl();
                                                                                                             vds.add(vd);
    }
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 6:
      case 8:
      case 11:
      case 20:
      case 40:
      case 47:
      case 72:
      case 75:
      case 81:
      case 83:
      case 90:
      case INT:
      case STRING:
      case ID:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
      st = Stmt();
                                                                                                                                             sts.add(st);
    }
    jj_consume_token(106);
    jj_consume_token(106);
  cl.add( new Absyn.MainClassDecl(name.toString(),parent.toString(),vds,sts));
  }

  static final public void ClassDecl(LinkedList<Absyn.ClassDecl> cl) throws ParseException {
  Token name = null; parent = null;
  LinkedList<Absyn.VarDecl> vds = new LinkedList<Absyn.VarDecl>();
  LinkedList<Absyn.MethodDecl> mds = new LinkedList<Absyn.MethodDecl>();
    jj_consume_token(33);
    name = jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 39:
      jj_consume_token(39);
      parent = jj_consume_token(ID);
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    jj_consume_token(20);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 30:
      case 49:
      case 65:
      case ID:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_4;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 30:
      case 49:
      case ID:
        VarDecl(vds);
        break;
      case 65:
        MethodDecl(mds);
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(106);
   cl.add(new Absyn.ClassDecl(name.toString(),parent.toString(),fes,mds));
  }

  static final public void ThreadDecl(LinkedList<Absyn.ClassDecl> cl) throws ParseException {
  Token name = null; parent = null;
//  Absyn.VarDecl vad;
  LinkedList<Absyn.VarDecl> vads = new LinkedList<Absyn.VarDecl>();
 // Absyn.MethodDecl md;
  LinkedList<Absyn.MethodDecl> mds = new LinkedList<Absyn.MethodDecl>();
    jj_consume_token(33);
    name = jj_consume_token(ID);
    jj_consume_token(39);
    jj_consume_token(87);
    jj_consume_token(20);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 30:
      case 49:
      case 65:
      case ID:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_5;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 30:
      case 49:
      case ID:
        VarDecl(vads);
        break;
      case 65:
        MethodDecl(mds);
        break;
        VoidDecl(mds);
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(106);
   cl.add(new Absyn.ThreadDecl(name.toString(),vads,mds));
  }

  static final public void VarDecl(LinkedList<Absyn.VarDecl> vl) throws ParseException {
  Token name = null;
  Absyn.Type type;
  Absyn.Expr expr = null;
    type = Type();
    name = jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 16:
      jj_consume_token(16);
      expr = Expr();
      jj_consume_token(14);
                                                    v1.add(new VarDecl(type,name.toString(),expr));
      break;
    case 14:
      jj_consume_token(14);
                                                    v1.add( new VarDecl(type,name.toString(),expr));
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void MethodDecl(LinkedList<Absyn.MethodDecl> ml) throws ParseException {
        Absyn.Type type = null;
        Token name;
        Absyn.Formal  param = null;
        Absyn.Stmt    stmt  = null;
        Absyn.Expr    expr  = null;
        boolean sync = false;
        LinkedList<Absyn.Formal> params   = new LinkedList<Absyn.Formal>();
        LinkedList<Absyn.VarDecl> locals  = new LinkedList<Absyn.VarDecl>();
        LinkedList<Absyn.Stmt> stmts      = new LinkedList<Absyn.Stmt>();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 65:
      jj_consume_token(65);
      jj_consume_token(67);
      jj_consume_token(79);
      break;
      jj_consume_token(65);
      type = Type();
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    name = jj_consume_token(ID);
    jj_consume_token(6);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 88:
      jj_consume_token(88);
                                sync = true;
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 30:
    case 49:
    case ID:
      param = Formal();
                                params.add(param);
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 10:
          ;
          break;
        default:
          jj_la1[12] = jj_gen;
          break label_6;
        }
        jj_consume_token(10);
        param = Formal();
                                                                            params.add(param);
      }
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
    jj_consume_token(7);
    jj_consume_token(20);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 30:
      case 49:
      case ID:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_7;
      }
      VarDecl(locals);
    }
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 6:
      case 8:
      case 11:
      case 20:
      case 40:
      case 47:
      case 72:
      case 75:
      case 81:
      case 83:
      case 90:
      case INT:
      case STRING:
      case ID:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_8;
      }
      stmt = Stmt();
                                stmts.add(stmt);
    }
    jj_consume_token(66);
    expr = Expr();
    jj_consume_token(14);
    jj_consume_token(106);
                  ml.add(new Absyn.MethodDecl(type, sync, name.toString(),
                                            params, locals, stmts, expr));
  }

  static final public void VoidDecl() throws ParseException {
  Token name = null;
  LinkedList<Absyn.VarDecl> vds = new LinkedList<Absyn.VarDecl>();
  Absyn.Stmt st = null;
  LinkedList<Absyn.Stmt> sts = new LinkedList<Absyn.Stmt>();
    jj_consume_token(65);
    jj_consume_token(79);
    name = jj_consume_token(ID);
    jj_consume_token(6);
    jj_consume_token(7);
    jj_consume_token(20);
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 30:
      case 49:
      case ID:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_9;
      }
      VarDecl(vds);
    }
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 6:
      case 8:
      case 11:
      case 20:
      case 40:
      case 47:
      case 72:
      case 75:
      case 81:
      case 83:
      case 90:
      case INT:
      case STRING:
      case ID:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_10;
      }
      st = Stmt();
                                                                          sts.add(st);
    }
    jj_consume_token(106);
   ml.add( new VoidDecl(name.toString(),vds,sts));
  }

//Formal(Type type, String name)
  static final public Absyn.Formal Formal() throws ParseException {
        Absyn.Type type;
        Token name;
    type = Type();
    name = jj_consume_token(ID);
          {if (true) return new Absyn.Formal(type, name.toString());}
    throw new Error("Missing return statement in function");
  }

  static final public Absyn.FieldDecl FieldDecl() throws ParseException {
  Absyn.Type type;
  Token name = null;
    type = Type();
    name = jj_consume_token(ID);
    jj_consume_token(14);
     {if (true) return new FieldDecl(type,name);}
    throw new Error("Missing return statement in function");
  }

  static final public Absyn.Type Type() throws ParseException {
 Absyn.Type t;
    if (jj_2_1(2147483647)) {
      t = BooleanType();
    } else if (jj_2_2(2147483647)) {
      t = IntegerType();
    } else if (jj_2_3(2147483647)) {
      t = IdentifierType();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    t = Tprime(t);
        {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  static final public Absyn.Type Tprime(Absyn.Type t) throws ParseException {
    t = ArrayType(t);
    {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  static final public Absyn.Type ArrayType(Absyn.Type t) throws ParseException {
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 18:
        ;
        break;
      default:
        jj_la1[18] = jj_gen;
        break label_11;
      }
      jj_consume_token(18);
      jj_consume_token(19);
    }
  {if (true) return new Absyn.ArrayType(t);}
    throw new Error("Missing return statement in function");
  }

  static final public Absyn.Type BooleanType() throws ParseException {
    jj_consume_token(30);
    {if (true) return new Absyn.BooleanType();}
    throw new Error("Missing return statement in function");
  }

  static final public Absyn.Type IntegerType() throws ParseException {
    jj_consume_token(49);
    {if (true) return new Absyn.IntegerType();}
    throw new Error("Missing return statement in function");
  }

  static final public Absyn.Type IdentifierType() throws ParseException {
  Token t;
    t = jj_consume_token(ID);
          {if (true) return new Absyn.IdentifierType(t.image);}
    throw new Error("Missing return statement in function");
  }

  static final public Absyn.Stmt Stmt() throws ParseException {
        Absyn.Stmt s;
    if (jj_2_4(2147483647)) {
      s = AssignStmt();
    } else if (jj_2_5(2147483647)) {
      s = BlockStmt();
    } else if (jj_2_6(2147483647)) {
      s = IfStmt();
    } else if (jj_2_7(2147483647)) {
      s = XinuCallStmt();
    } else if (jj_2_8(2147483647)) {
      s = WhileStmt();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  static final public Absyn.Stmt AssignStmt() throws ParseException {
        Absyn.Expr lhs = null, rhs = null;
    lhs = Expr();
    jj_consume_token(16);
    rhs = Expr();
    jj_consume_token(14);
          {if (true) return new Absyn.AssignStmt((Absyn.AssignableExpr) lhs, rhs);}
    throw new Error("Missing return statement in function");
  }

  static final public Absyn.Stmt BlockStmt() throws ParseException {
        Absyn.Stmt stmt = null;
        LinkedList<Absyn.Stmt> stmts      = new LinkedList<Absyn.Stmt>();
    jj_consume_token(20);
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 6:
      case 8:
      case 11:
      case 20:
      case 40:
      case 47:
      case 72:
      case 75:
      case 81:
      case 83:
      case 90:
      case INT:
      case STRING:
      case ID:
        ;
        break;
      default:
        jj_la1[19] = jj_gen;
        break label_12;
      }
      stmt = Stmt();
                          stmts.add(stmt);
    }
    jj_consume_token(106);
          {if (true) return new Absyn.BlockStmt(stmts);}
    throw new Error("Missing return statement in function");
  }

  static final public Absyn.Stmt IfStmt() throws ParseException {
        Absyn.Expr test;
        Absyn.Stmt thenStm, elseStm = null;
    jj_consume_token(47);
    jj_consume_token(6);
    test = Expr();
    jj_consume_token(7);
    thenStm = Stmt();
    jj_consume_token(36);

              elseStm = null;
          {if (true) return new Absyn.IfStmt(test, thenStm, elseStm);}
    throw new Error("Missing return statement in function");
  }

  static final public Absyn.Stmt XinuCallStmt() throws ParseException {
        Token name;
        Absyn.Expr arg;
        LinkedList<Absyn.Expr> args      = new LinkedList<Absyn.Expr>();
    jj_consume_token(83);
    jj_consume_token(12);
    name = jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 6:
    case 8:
    case 11:
    case 40:
    case 72:
    case 75:
    case 83:
    case 90:
    case INT:
    case STRING:
    case ID:
      arg = Expr();
                       args.add(arg);
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 6:
        case 8:
        case 11:
        case 40:
        case 72:
        case 75:
        case 83:
        case 90:
        case INT:
        case STRING:
        case ID:
          ;
          break;
        default:
          jj_la1[20] = jj_gen;
          break label_13;
        }
        arg = Expr();
                                                        args.add(arg);
      }
      break;
    default:
      jj_la1[21] = jj_gen;
      ;
    }
    jj_consume_token(7);
    jj_consume_token(14);
          {if (true) return new Absyn.XinuCallStmt(name.image, args);}
    throw new Error("Missing return statement in function");
  }

  static final public Absyn.Stmt WhileStmt() throws ParseException {
        Absyn.Expr test;
        Absyn.Stmt body;
    jj_consume_token(81);
    jj_consume_token(6);
    test = Expr();
    jj_consume_token(7);
    body = Stmt();
          {if (true) return new Absyn.WhileStmt(test, body);}
    throw new Error("Missing return statement in function");
  }

  static final public Absyn.Expr Expr() throws ParseException {
        Absyn.Expr e;
        Absyn.Expr ep;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 40:
      e = FalseExpr();
      break;
    case ID:
      e = IdentifierExpr();
      break;
    case 11:
      e = NegExpr();
      break;
    case 8:
      e = NotExpr();
      break;
    case 90:
      e = NullExpr();
      break;
    case 72:
      e = ThisExpr();
      break;
    case 75:
      e = TrueExpr();
      break;
    case 83:
      e = XinuCallExpr();
      break;
    case INT:
      e = IntegerLiteral();
      break;
    case STRING:
      e = StringLiteral();
      break;
    case 6:
      jj_consume_token(6);
      e = Expr();
      jj_consume_token(7);
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    e = Eprime(e);
          {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  static final public Absyn.Expr Eprime(Absyn.Expr passed) throws ParseException {
        Absyn.Expr = e;
        Token id = null;
        Absyn.Expr exp;
        ArrayList<Absyn.Expr> exps = new ArrayList<Absyn.Expr>();

                 e = passed;
          {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  static final public Absyn.AddExpr AddExpr(Absyn.Expr passed) throws ParseException {
        Absyn.Expr e;
    jj_consume_token(107);
    e = Expr();
          {if (true) return new AddExpr(passed, e);}
    throw new Error("Missing return statement in function");
  }

  static final public Absyn.AndExpr AndExpr(Absyn.Expr passed) throws ParseException {
        Absyn.Expr e;
    jj_consume_token(108);
    e = Expr();
          {if (true) return new AndExpr(passed, e);}
    throw new Error("Missing return statement in function");
  }

//DivExpr(Expr e1, Expr e2)
  static final public Absyn.DivExpr DivExpr(Absyn.Expr passed) throws ParseException {
        Absyn.Expr e;
    jj_consume_token(13);
    e = Expr();
          {if (true) return new Absyn.DivExpr(passed, e);}
    throw new Error("Missing return statement in function");
  }

//EqualExpr(Expr e1, Expr e2)
  static final public Absyn.EqualExpr EqualExpr(Absyn.Expr passed) throws ParseException {
        Absyn.Expr e;
    jj_consume_token(109);
    e = Expr();
          {if (true) return new Absyn.EqualExpr(passed, e);}
    throw new Error("Missing return statement in function");
  }

//GreaterExpr(Expr e1, Expr e2)
  static final public Absyn.GreaterExpr GreaterExpr(Absyn.Expr passed) throws ParseException {
        Absyn.Expr e;
    jj_consume_token(17);
    e = Expr();
          {if (true) return new Absyn.GreaterExpr(passed, e);}
    throw new Error("Missing return statement in function");
  }

//LesserExpr(Expr e1, Expr e2)
  static final public Absyn.LesserExpr LesserExpr(Absyn.Expr passed) throws ParseException {
        Absyn.Expr e;
    jj_consume_token(15);
    e2 = Expr();
          {if (true) return new Absyn.LesserExpr(passed, e);}
    throw new Error("Missing return statement in function");
  }

//MulExpr(Expr e1, Expr e2)
  static final public Absyn.MulExpr MulExpr(Absyn.Expr passed) throws ParseException {
        Absyn.Expr e;
    jj_consume_token(9);
    e = Expr();
          {if (true) return new Absyn.MulExpr(passed, e);}
    throw new Error("Missing return statement in function");
  }

//NotEqExpr(Expr e1, Expr e2)
  static final public Absyn.NotEqExpr NotEqExpr(Absyn.Expr passed) throws ParseException {
        Absyn.Expr e;
    jj_consume_token(110);
    e = Expr();
          {if (true) return new Absyn.NotEqExpr(passed, e);}
    throw new Error("Missing return statement in function");
  }

//OrExpr(Expr e1, Expr e2)
  static final public Absyn.OrExpr OrExpr(Absyn.Expr passed) throws ParseException {
        Absyn.Expr e;
    jj_consume_token(111);
    e = Expr();
          {if (true) return new Absyn.OrExpr(passed, e);}
    throw new Error("Missing return statement in function");
  }

//SubExpr(Expr e1, Expr e2)
  static final public Absyn.SubExpr SubExpr(Absyn.Expr passed) throws ParseException {
        Absyn.Expr e;
    jj_consume_token(11);
    e2 = Expr();
          {if (true) return new Absyn.SubExpr(passed, e);}
    throw new Error("Missing return statement in function");
  }

//ArrayExpr(Expr target, Expr index)
  static final public Absyn.ArrayExpr ArrayExpr(Absyn.Expr passed) throws ParseException {
        Absyn.Expr index;
    jj_consume_token(18);
    index = Expr();
    jj_consume_token(19);
          {if (true) return new Absyn.ArrayExpr(passed, index);}
    throw new Error("Missing return statement in function");
  }

//CallExpr(Expr target, String method, LinkedList<Expr> args)
  static final public Absyn.CallExpr CallExpr(Absyn.Expr passed) throws ParseException {
        Token method;
        Absyn.Expr arg;
        LinkedList<Absyn.Expr> args = new LinkedList<Absyn.Expr>();
    jj_consume_token(12);
    method = jj_consume_token(ID);
    jj_consume_token(6);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 6:
    case 8:
    case 11:
    case 40:
    case 72:
    case 75:
    case 83:
    case 90:
    case INT:
    case STRING:
    case ID:
      arg = Expr();
                                           args.add(arg);
      label_14:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 6:
        case 8:
        case 11:
        case 40:
        case 72:
        case 75:
        case 83:
        case 90:
        case INT:
        case STRING:
        case ID:
          ;
          break;
        default:
          jj_la1[23] = jj_gen;
          break label_14;
        }
        arg = Expr();
                                                                            args.add(arg);
      }
      break;
    default:
      jj_la1[24] = jj_gen;
      ;
    }
    jj_consume_token(7);
          {if (true) return new Absyn.CallExpr(passed, method.image, args);}
    throw new Error("Missing return statement in function");
  }

//FalseExpr()
  static final public Absyn.FalseExpr FalseExpr() throws ParseException {
    jj_consume_token(40);
          {if (true) return new Absyn.FalseExpr();}
    throw new Error("Missing return statement in function");
  }

//FieldExpr(Expr target, String field)
  static final public Absyn.FieldExpr FieldExpr(Absyn.Expr passed) throws ParseException {
        Token field;
    jj_consume_token(12);
    field = jj_consume_token(ID);
          {if (true) return new Absyn.FieldExpr(passed, field.image);}
    throw new Error("Missing return statement in function");
  }

//IdentifierExpr(String id)
  static final public Absyn.IdentifierExpr IdentifierExpr() throws ParseException {
        Token id;
    id = jj_consume_token(ID);
          {if (true) return new Absyn.IdentifierExpr(id.image);}
    throw new Error("Missing return statement in function");
  }

//NegExpr(Expr e1)
  static final public Absyn.NegExpr NegExpr() throws ParseException {
        Absyn.Expr e1;
    jj_consume_token(11);
    e1 = Expr();
         {if (true) return new Absyn.NegExpr(e1);}
    throw new Error("Missing return statement in function");
  }

//NewArrayExpr(Type type, LinkedList<Expr> dimensions)
  static final public Absyn.NewArrayExpr NewArrayExpr() throws ParseException {
        Absyn.Type type;
        Absyn.Expr expr;
        LinkedList<Absyn.Expr> dimensions = new LinkedList<Absyn.Expr>();
    jj_consume_token(57);
    type = Type();
    jj_consume_token(18);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 6:
    case 8:
    case 11:
    case 40:
    case 72:
    case 75:
    case 83:
    case 90:
    case INT:
    case STRING:
    case ID:
      expr = Expr();
                                         dimensions.add(expr);
      break;
    default:
      jj_la1[25] = jj_gen;

                              dimensions.add(null);
    }
    jj_consume_token(19);
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 18:
        ;
        break;
      default:
        jj_la1[26] = jj_gen;
        break label_15;
      }
      jj_consume_token(18);
      jj_consume_token(19);
    }
          {if (true) return new Absyn.NewArrayExpr(type, dimensions);}
    throw new Error("Missing return statement in function");
  }

//NewObjectExpr(Type type)
  static final public Absyn.NewObjectExpr NewObjectExpr() throws ParseException {
        Absyn.Type type;
    jj_consume_token(57);
    type = Type();
    jj_consume_token(6);
    jj_consume_token(7);
          {if (true) return new Absyn.NewObjectExpr(type);}
    throw new Error("Missing return statement in function");
  }

//NotExpr(Expr e1)
  static final public Absyn.NotExpr NotExpr() throws ParseException {
        Absyn.Expr e1;
    jj_consume_token(8);
    e1 = Expr();
          {if (true) return new Absyn.NotExpr(e1);}
    throw new Error("Missing return statement in function");
  }

//NullExpr()
  static final public Absyn.NullExpr NullExpr() throws ParseException {
    jj_consume_token(90);
          {if (true) return new Absyn.NullExpr();}
    throw new Error("Missing return statement in function");
  }

//XinuCallExpr(list of Expr)
  static final public Absyn.XinuCallExpr XinuCallExpr() throws ParseException {
        Token name;
        Absyn.Expr arg;
        LinkedList<Absyn.Expr> args      = new LinkedList<Absyn.Expr>();
    jj_consume_token(83);
    jj_consume_token(12);
    name = jj_consume_token(ID);
    jj_consume_token(6);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 6:
    case 8:
    case 11:
    case 40:
    case 72:
    case 75:
    case 83:
    case 90:
    case INT:
    case STRING:
    case ID:
      arg = Expr();
                                       args.add(arg);
      label_16:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 10:
          ;
          break;
        default:
          jj_la1[27] = jj_gen;
          break label_16;
        }
        jj_consume_token(10);
        arg = Expr();
                                                                          args.add(arg);
      }
      break;
    default:
      jj_la1[28] = jj_gen;
      ;
    }
    jj_consume_token(7);
                  {if (true) return new Absyn.XinuCallExpr(name.image, args);}
    throw new Error("Missing return statement in function");
  }

//ThisExpr()
  static final public Absyn.ThisExpr ThisExpr() throws ParseException {
    jj_consume_token(72);
          {if (true) return new Absyn.ThisExpr();}
    throw new Error("Missing return statement in function");
  }

//TrueExpr()
  static final public Absyn.TrueExpr TrueExpr() throws ParseException {
    jj_consume_token(75);
          {if (true) return new Absyn.TrueExpr();}
    throw new Error("Missing return statement in function");
  }

//IntegerLiteral(int value)
  static final public Absyn.IntegerLiteral IntegerLiteral() throws ParseException {
  Token t;
    t = jj_consume_token(INT);
          {if (true) return new Absyn.IntegerLiteral(new Integer(t.toString()));}
    throw new Error("Missing return statement in function");
  }

//StringLiteral(String value)
  static final public Absyn.StringLiteral StringLiteral() throws ParseException {
  Token t;
    t = jj_consume_token(STRING);
          {if (true) return new Absyn.StringLiteral(t.toString());}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_3R_20() {
    if (jj_3R_25()) return true;
    if (jj_scan_token(16)) return true;
    if (jj_3R_25()) return true;
    if (jj_scan_token(14)) return true;
    return false;
  }

  static private boolean jj_3R_77() {
    if (jj_scan_token(111)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3_8() {
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_91() {
    if (jj_scan_token(10)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3R_89() {
    if (jj_scan_token(110)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3R_47() {
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_46() {
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3R_45() {
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3R_44() {
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3R_43() {
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_84() {
    if (jj_scan_token(9)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3R_27() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_19() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3R_58() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  static private boolean jj_3R_81() {
    if (jj_scan_token(15)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    if (jj_scan_token(49)) return true;
    return false;
  }

  static private boolean jj_3R_57() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  static private boolean jj_3R_17() {
    if (jj_scan_token(30)) return true;
    return false;
  }

  static private boolean jj_3R_80() {
    if (jj_scan_token(17)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3R_75() {
    if (jj_3R_25()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_91()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_55() {
    if (jj_scan_token(75)) return true;
    return false;
  }

  static private boolean jj_3R_96() {
    if (jj_scan_token(18)) return true;
    if (jj_scan_token(19)) return true;
    return false;
  }

  static private boolean jj_3R_54() {
    if (jj_scan_token(72)) return true;
    return false;
  }

  static private boolean jj_3R_105() {
    if (jj_scan_token(18)) return true;
    if (jj_scan_token(19)) return true;
    return false;
  }

  static private boolean jj_3R_79() {
    if (jj_scan_token(109)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3R_104() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_105()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_103() {
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3R_102() {
    if (jj_3R_104()) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3R_56() {
    if (jj_scan_token(83)) return true;
    if (jj_scan_token(12)) return true;
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(6)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_75()) jj_scanpos = xsp;
    if (jj_scan_token(7)) return true;
    return false;
  }

  static private boolean jj_3R_101() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_102()) {
    jj_scanpos = xsp;
    if (jj_3R_103()) return true;
    }
    return false;
  }

  static private boolean jj_3R_85() {
    if (jj_scan_token(13)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_100() {
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3R_99() {
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3R_98() {
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_78() {
    if (jj_scan_token(108)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3R_53() {
    if (jj_scan_token(90)) return true;
    return false;
  }

  static private boolean jj_3R_93() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_98()) {
    jj_scanpos = xsp;
    if (jj_3R_99()) {
    jj_scanpos = xsp;
    if (jj_3R_100()) return true;
    }
    }
    if (jj_3R_101()) return true;
    return false;
  }

  static private boolean jj_3R_82() {
    if (jj_scan_token(107)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3R_52() {
    if (jj_scan_token(8)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3R_95() {
    return false;
  }

  static private boolean jj_3R_94() {
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3R_74() {
    if (jj_3R_90()) return true;
    return false;
  }

  static private boolean jj_3R_73() {
    if (jj_3R_89()) return true;
    return false;
  }

  static private boolean jj_3R_72() {
    if (jj_3R_88()) return true;
    return false;
  }

  static private boolean jj_3R_87() {
    if (jj_scan_token(57)) return true;
    if (jj_3R_93()) return true;
    if (jj_scan_token(6)) return true;
    if (jj_scan_token(7)) return true;
    return false;
  }

  static private boolean jj_3R_71() {
    if (jj_3R_87()) return true;
    return false;
  }

  static private boolean jj_3R_70() {
    if (jj_3R_86()) return true;
    return false;
  }

  static private boolean jj_3R_69() {
    if (jj_3R_85()) return true;
    return false;
  }

  static private boolean jj_3R_68() {
    if (jj_3R_84()) return true;
    return false;
  }

  static private boolean jj_3R_67() {
    if (jj_3R_83()) return true;
    return false;
  }

  static private boolean jj_3R_66() {
    if (jj_3R_82()) return true;
    return false;
  }

  static private boolean jj_3R_65() {
    if (jj_3R_81()) return true;
    return false;
  }

  static private boolean jj_3R_64() {
    if (jj_3R_80()) return true;
    return false;
  }

  static private boolean jj_3R_63() {
    if (jj_3R_79()) return true;
    return false;
  }

  static private boolean jj_3R_62() {
    if (jj_3R_78()) return true;
    return false;
  }

  static private boolean jj_3R_61() {
    if (jj_3R_77()) return true;
    return false;
  }

  static private boolean jj_3R_60() {
    if (jj_3R_76()) return true;
    return false;
  }

  static private boolean jj_3R_59() {
    return false;
  }

  static private boolean jj_3R_97() {
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3R_88() {
    if (jj_scan_token(57)) return true;
    if (jj_3R_93()) return true;
    if (jj_scan_token(18)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_94()) {
    jj_scanpos = xsp;
    if (jj_3R_95()) return true;
    }
    if (jj_scan_token(19)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_96()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_42() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) {
    jj_scanpos = xsp;
    if (jj_3R_69()) {
    jj_scanpos = xsp;
    if (jj_3R_70()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) {
    jj_scanpos = xsp;
    if (jj_3R_72()) {
    jj_scanpos = xsp;
    if (jj_3R_73()) {
    jj_scanpos = xsp;
    if (jj_3R_74()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_41() {
    if (jj_scan_token(6)) return true;
    if (jj_3R_25()) return true;
    if (jj_scan_token(7)) return true;
    return false;
  }

  static private boolean jj_3R_40() {
    if (jj_3R_58()) return true;
    return false;
  }

  static private boolean jj_3R_39() {
    if (jj_3R_57()) return true;
    return false;
  }

  static private boolean jj_3R_48() {
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3R_38() {
    if (jj_3R_56()) return true;
    return false;
  }

  static private boolean jj_3R_51() {
    if (jj_scan_token(11)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3R_37() {
    if (jj_3R_55()) return true;
    return false;
  }

  static private boolean jj_3R_36() {
    if (jj_3R_54()) return true;
    return false;
  }

  static private boolean jj_3R_35() {
    if (jj_3R_53()) return true;
    return false;
  }

  static private boolean jj_3R_34() {
    if (jj_3R_52()) return true;
    return false;
  }

  static private boolean jj_3R_33() {
    if (jj_3R_51()) return true;
    return false;
  }

  static private boolean jj_3R_32() {
    if (jj_3R_50()) return true;
    return false;
  }

  static private boolean jj_3R_31() {
    if (jj_3R_49()) return true;
    return false;
  }

  static private boolean jj_3R_25() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    if (jj_3R_42()) return true;
    return false;
  }

  static private boolean jj_3R_50() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3R_92() {
    if (jj_3R_25()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_97()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_90() {
    if (jj_scan_token(12)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3R_24() {
    if (jj_scan_token(81)) return true;
    if (jj_scan_token(6)) return true;
    if (jj_3R_25()) return true;
    if (jj_scan_token(7)) return true;
    if (jj_3R_27()) return true;
    return false;
  }

  static private boolean jj_3R_49() {
    if (jj_scan_token(40)) return true;
    return false;
  }

  static private boolean jj_3R_30() {
    if (jj_3R_25()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_48()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_23() {
    if (jj_scan_token(83)) return true;
    if (jj_scan_token(12)) return true;
    if (jj_scan_token(ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_30()) jj_scanpos = xsp;
    if (jj_scan_token(7)) return true;
    if (jj_scan_token(14)) return true;
    return false;
  }

  static private boolean jj_3R_76() {
    if (jj_scan_token(12)) return true;
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(6)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_92()) jj_scanpos = xsp;
    if (jj_scan_token(7)) return true;
    return false;
  }

  static private boolean jj_3R_29() {
    if (jj_3R_27()) return true;
    return false;
  }

  static private boolean jj_3R_28() {
    return false;
  }

  static private boolean jj_3R_22() {
    if (jj_scan_token(47)) return true;
    if (jj_scan_token(6)) return true;
    if (jj_3R_25()) return true;
    if (jj_scan_token(7)) return true;
    if (jj_3R_27()) return true;
    if (jj_scan_token(36)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) return true;
    }
    return false;
  }

  static private boolean jj_3R_86() {
    if (jj_scan_token(18)) return true;
    if (jj_3R_25()) return true;
    if (jj_scan_token(19)) return true;
    return false;
  }

  static private boolean jj_3R_26() {
    if (jj_3R_27()) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    if (jj_scan_token(20)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_26()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(106)) return true;
    return false;
  }

  static private boolean jj_3R_83() {
    if (jj_scan_token(11)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[29];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x40000000,0x100940,0x0,0x40000000,0x40000000,0x40000000,0x40000000,0x14000,0x0,0x0,0x400,0x40000000,0x40000000,0x100940,0x40000000,0x100940,0x40000,0x100940,0x940,0x940,0x940,0x940,0x940,0x940,0x40000,0x400,0x940,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x2,0x2,0x20000,0x8100,0x80,0x20000,0x20000,0x20000,0x20000,0x0,0x0,0x0,0x0,0x20000,0x20000,0x8100,0x20000,0x8100,0x0,0x8100,0x100,0x100,0x100,0x100,0x100,0x100,0x0,0x0,0x100,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x40a0900,0x0,0x2,0x2,0x2,0x2,0x0,0x2,0x1000000,0x0,0x0,0x0,0x40a0900,0x0,0x40a0900,0x0,0x40a0900,0x4080900,0x4080900,0x4080900,0x4080900,0x4080900,0x4080900,0x0,0x0,0x4080900,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x40,0x64,0x0,0x40,0x40,0x40,0x40,0x0,0x0,0x0,0x0,0x40,0x40,0x64,0x40,0x64,0x0,0x64,0x64,0x64,0x64,0x64,0x64,0x64,0x0,0x0,0x64,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[8];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List jj_expentries = new java.util.ArrayList();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[112];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 29; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 112; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 8; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

                            }
