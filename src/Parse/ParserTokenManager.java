/* Generated By:JavaCC: Do not edit this line. ParserTokenManager.java */
import java.util.LinkedList;

/** Token Manager. */
public class ParserTokenManager implements ParserConstants
{

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x4000L) != 0L || (active1 & 0xa0000000L) != 0L)
            return 2;
         if ((active0 & 0xffffffffff800000L) != 0L || (active1 & 0x1fffffffL) != 0L)
         {
            jjmatchedKind = 104;
            return 19;
         }
         return -1;
      case 1:
         if ((active1 & 0x80000000L) != 0L)
            return 0;
         if ((active0 & 0xfffdffffff800000L) != 0L || (active1 & 0x1fffffffL) != 0L)
         {
            jjmatchedKind = 104;
            jjmatchedPos = 1;
            return 19;
         }
         if ((active0 & 0x2000000000000L) != 0L)
            return 19;
         return -1;
      case 2:
         if ((active0 & 0xf7f5ffffff800000L) != 0L || (active1 & 0x1fffffffL) != 0L)
         {
            jjmatchedKind = 104;
            jjmatchedPos = 2;
            return 19;
         }
         if ((active0 & 0x808000000000000L) != 0L)
            return 19;
         return -1;
      case 3:
         if ((active0 & 0xf775febfff800000L) != 0L || (active1 & 0xf1d5bbfL) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 104;
               jjmatchedPos = 3;
            }
            return 19;
         }
         if ((active0 & 0x80014000000000L) != 0L || (active1 & 0x10e2a440L) != 0L)
            return 19;
         return -1;
      case 4:
         if ((active0 & 0xf775fab7ff000000L) != 0L || (active1 & 0xfd55bbfL) != 0L)
         {
            jjmatchedKind = 104;
            jjmatchedPos = 4;
            return 19;
         }
         if ((active0 & 0x40800800000L) != 0L || (active1 & 0x80000L) != 0L)
            return 19;
         return -1;
      case 5:
         if ((active0 & 0xf771dab7ff000000L) != 0L || (active1 & 0xcd54a05L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 104;
               jjmatchedPos = 5;
            }
            return 19;
         }
         if ((active0 & 0x4200000000000L) != 0L || (active1 & 0x30011baL) != 0L)
            return 19;
         return -1;
      case 6:
         if ((active0 & 0x7171d896fc000000L) != 0L || (active1 & 0xdd45901L) != 0L)
         {
            jjmatchedKind = 104;
            jjmatchedPos = 6;
            return 19;
         }
         if ((active0 & 0x8600022103000000L) != 0L || (active1 & 0x10204L) != 0L)
            return 19;
         return -1;
      case 7:
         if ((active0 & 0x7171d892fc000000L) != 0L || (active1 & 0xdd01100L) != 0L)
         {
            jjmatchedKind = 104;
            jjmatchedPos = 7;
            return 19;
         }
         if ((active0 & 0x400000000L) != 0L || (active1 & 0x44801L) != 0L)
            return 19;
         return -1;
      case 8:
         if ((active0 & 0x3171c00230000000L) != 0L || (active1 & 0xdc01100L) != 0L)
         {
            jjmatchedKind = 104;
            jjmatchedPos = 8;
            return 19;
         }
         if ((active0 & 0x40001890cc000000L) != 0L || (active1 & 0x100000L) != 0L)
            return 19;
         return -1;
      case 9:
         if ((active0 & 0x3031c00210000000L) != 0L || (active1 & 0xdc00100L) != 0L)
         {
            jjmatchedKind = 104;
            jjmatchedPos = 9;
            return 19;
         }
         if ((active0 & 0x140000020000000L) != 0L || (active1 & 0x1000L) != 0L)
            return 19;
         return -1;
      case 10:
         if ((active0 & 0x20400200000000L) != 0L)
            return 19;
         if ((active0 & 0x3011800010000000L) != 0L || (active1 & 0xdc00100L) != 0L)
         {
            jjmatchedKind = 104;
            jjmatchedPos = 10;
            return 19;
         }
         return -1;
      case 11:
         if ((active0 & 0x2011800010000000L) != 0L || (active1 & 0x1000100L) != 0L)
         {
            jjmatchedKind = 104;
            jjmatchedPos = 11;
            return 19;
         }
         if ((active0 & 0x1000000000000000L) != 0L || (active1 & 0xcc00000L) != 0L)
            return 19;
         return -1;
      case 12:
         if ((active0 & 0x11800010000000L) != 0L || (active1 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 104;
            jjmatchedPos = 12;
            return 19;
         }
         if ((active0 & 0x2000000000000000L) != 0L || (active1 & 0x100L) != 0L)
            return 19;
         return -1;
      case 13:
         if ((active1 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 104;
            jjmatchedPos = 13;
            return 19;
         }
         if ((active0 & 0x11800010000000L) != 0L)
            return 19;
         return -1;
      case 14:
         if ((active1 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 104;
            jjmatchedPos = 14;
            return 19;
         }
         return -1;
      case 15:
         if ((active1 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 104;
            jjmatchedPos = 15;
            return 19;
         }
         return -1;
      case 16:
         if ((active1 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 104;
            jjmatchedPos = 16;
            return 19;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 8;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400000000000L);
      case 38:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000000000L);
      case 40:
         return jjStopAtPos(0, 6);
      case 41:
         return jjStopAtPos(0, 7);
      case 42:
         return jjStopAtPos(0, 9);
      case 43:
         return jjStopAtPos(0, 13);
      case 44:
         return jjStopAtPos(0, 10);
      case 45:
         return jjStopAtPos(0, 11);
      case 46:
         return jjStopAtPos(0, 12);
      case 47:
         jjmatchedKind = 14;
         return jjMoveStringLiteralDfa1_0(0x0L, 0xa0000000L);
      case 59:
         return jjStopAtPos(0, 15);
      case 60:
         return jjStopAtPos(0, 16);
      case 61:
         jjmatchedKind = 17;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200000000000L);
      case 62:
         return jjStopAtPos(0, 18);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x3f800000L, 0x8000000L);
      case 66:
         return jjMoveStringLiteralDfa1_0(0x2c0000000L, 0x0L);
      case 67:
         return jjMoveStringLiteralDfa1_0(0x1400000000L, 0x0L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x2000000000L, 0x0L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0x18000000000L, 0x0L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x380000000000L, 0x0L);
      case 71:
         return jjMoveStringLiteralDfa1_0(0x400000000000L, 0x0L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x35800000000000L, 0x0L);
      case 76:
         return jjMoveStringLiteralDfa1_0(0x40000000000000L, 0x0L);
      case 77:
         return jjMoveStringLiteralDfa1_0(0x300000000000000L, 0x0L);
      case 78:
         return jjMoveStringLiteralDfa1_0(0xf400000000000000L, 0x1L);
      case 79:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3c0L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200d800L);
      case 86:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x50000L);
      case 87:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000L);
      case 88:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xe00000L);
      case 91:
         return jjStopAtPos(0, 19);
      case 93:
         return jjStopAtPos(0, 20);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x100000000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x800000000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x24000000000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x40000000000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0xa000000000000L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x80000000000000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x800000000000000L, 0x10000000L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000008L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000020L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2400L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20000L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80000L);
      case 123:
         return jjStopAtPos(0, 21);
      case 124:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800000000000L);
      case 125:
         return jjStopAtPos(0, 22);
      default :
         return jjMoveNfa_0(3, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active1 & 0x100000000000L) != 0L)
            return jjStopAtPos(1, 108);
         break;
      case 42:
         if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(1, 95, 0);
         break;
      case 47:
         if ((active1 & 0x20000000L) != 0L)
            return jjStopAtPos(1, 93);
         break;
      case 61:
         if ((active1 & 0x200000000000L) != 0L)
            return jjStopAtPos(1, 109);
         else if ((active1 & 0x400000000000L) != 0L)
            return jjStopAtPos(1, 110);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x800c0400000000L, active1, 0x10000L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000L, active1, 0x8000000L);
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x1800001000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x3d40000000000000L, active1, 0x10L);
      case 102:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 49, 19);
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000000L, active1, 0L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2181c00L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x102040000000L, active1, 0xe00000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x5880000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x38000002000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0xc000200300000000L, active1, 0x60000L);
      case 113:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000c000000L, active1, 0x6006L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x30000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1e0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000000000L, active1, 0x11000209L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x30000000000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4008000L);
      case 124:
         if ((active1 & 0x800000000000L) != 0L)
            return jjStopAtPos(1, 111);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2L);
      case 83:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x1800000000L, active1, 0x20L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1000208L);
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0x3000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x1d00000000000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000000L, active1, 0x1e0c00L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000c0400000000L, active1, 0x10000001L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x40L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000L, active1, 0x4e00000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x380000000L, active1, 0x4L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000L, active1, 0x8000L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000c000000L, active1, 0x2011180L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x40004030800000L, active1, 0x8000000L);
      case 116:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 51, 19);
         return jjMoveStringLiteralDfa3_0(active0, 0xc130020000000000L, active1, 0x10L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000L, active1, 0x6000L);
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000L, active1, 0L);
      case 119:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 59, 19);
         return jjMoveStringLiteralDfa3_0(active0, 0x3000000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000000L, active1, 0L);
      case 68:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x10000L);
      case 69:
         return jjMoveStringLiteralDfa4_0(active0, 0xc600002003000000L, active1, 0x200L);
      case 79:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000040000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x40800c000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000L, active1, 0x4000000L);
      case 100:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(3, 81, 19);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40000L);
      case 101:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 38, 19);
         else if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(3, 77, 19);
         else if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(3, 79, 19);
         return jjMoveStringLiteralDfa4_0(active0, 0x30020000000000L, active1, 0x2005000L);
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4L);
      case 104:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x30000000L, active1, 0x180L);
      case 108:
         if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(3, 92, 19);
         return jjMoveStringLiteralDfa4_0(active0, 0x100700000000L, active1, 0x1180009L);
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000000L, active1, 0L);
      case 110:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 55, 19);
         return jjMoveStringLiteralDfa4_0(active0, 0x1800000000000L, active1, 0L);
      case 114:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 40, 19);
         break;
      case 115:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(3, 74, 19);
         return jjMoveStringLiteralDfa4_0(active0, 0x400c1800000000L, active1, 0x800L);
      case 116:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(3, 70, 19);
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000L, active1, 0x8000020L);
      case 117:
         if ((active1 & 0x200000L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0xc00010L);
      case 120:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x2L);
      case 121:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0xc00000L);
      case 68:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x40000L);
      case 69:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000L, active1, 0x4801L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000000L, active1, 0x2001000L);
      case 98:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 42, 19);
         else if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(4, 83, 19);
         return jjMoveStringLiteralDfa5_0(active0, 0x40080300000000L, active1, 0x110000L);
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x30000030000000L, active1, 0L);
      case 104:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4000000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1000028L);
      case 107:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000000L, active1, 0L);
      case 110:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(4, 23, 19);
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000000L, active1, 0x180L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000000000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000L, active1, 0x2L);
      case 113:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000000000L, active1, 0x8000014L);
      case 115:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(4, 35, 19);
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x1c00000000000L, active1, 0L);
      case 120:
         return jjMoveStringLiteralDfa5_0(active0, 0x8600002003000000L, active1, 0x200L);
      case 121:
         return jjMoveStringLiteralDfa5_0(active0, 0xc000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 68:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000L, active1, 0L);
      case 69:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000188044000000L, active1, 0L);
      case 83:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000L, active1, 0x100000L);
      case 84:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x300000000L, active1, 0x8c00004L);
      case 99:
         if ((active1 & 0x8L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(5, 69, 19);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1010000L);
      case 100:
         if ((active1 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x100020000000000L, active1, 0x1000L);
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0x30400000000000L, active1, 0x40000L);
      case 103:
         if ((active1 & 0x80L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x100L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x1800000000000L, active1, 0L);
      case 106:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000000000L, active1, 0L);
      case 108:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 45, 19);
         break;
      case 110:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(5, 68, 19);
         return jjMoveStringLiteralDfa6_0(active0, 0x30000000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa6_0(active0, 0x8600002003000000L, active1, 0x200L);
      case 114:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(5, 65, 19);
         return jjMoveStringLiteralDfa6_0(active0, 0x1040000000000000L, active1, 0x4000000L);
      case 116:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 50, 19);
         break;
      case 120:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000L, active1, 0x4801L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 68:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000000000L, active1, 0x1000L);
      case 69:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000000000L, active1, 0L);
      case 76:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x100L);
      case 83:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000L, active1, 0L);
      case 95:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1000000L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000010000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x8040000L);
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000001000000000L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa7_0(active0, 0x1800000000000L, active1, 0L);
      case 108:
         if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(6, 80, 19);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0xc00000L);
      case 109:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(6, 66, 19);
         break;
      case 110:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(6, 32, 19);
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x4000000L);
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000L, active1, 0x4801L);
      case 114:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(6, 24, 19);
         else if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(6, 25, 19);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 37, 19);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 57, 19);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 58, 19);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 63, 19);
         else if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(6, 73, 19);
         return jjMoveStringLiteralDfa7_0(active0, 0x30400000000000L, active1, 0L);
      case 115:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 41, 19);
         break;
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000L, active1, 0x100000L);
      case 120:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000188044000000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1);
      return 7;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000000000L, active1, 0L);
      case 76:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000000000000L, active1, 0L);
      case 84:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000200000000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000001000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa8_0(active0, 0x100000000000000L, active1, 0x1000L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x1800000000000L, active1, 0x100L);
      case 108:
         if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(7, 82, 19);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0xc00000L);
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0x80000000L, active1, 0x100000L);
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x4000000L);
      case 112:
         return jjMoveStringLiteralDfa8_0(active0, 0x400018804c000000L, active1, 0L);
      case 114:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(7, 34, 19);
         else if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(7, 64, 19);
         else if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(7, 75, 19);
         else if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(7, 78, 19);
         break;
      case 115:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x1000000L);
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000000L, active1, 0x8000000L);
      case 120:
         return jjMoveStringLiteralDfa8_0(active0, 0x40000000000000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1);
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1);
      return 8;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000000000000L, active1, 0x400000L);
      case 76:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x8000000L);
      case 83:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x800000L);
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0x100000000000000L, active1, 0x1000L);
      case 101:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(8, 27, 19);
         return jjMoveStringLiteralDfa9_0(active0, 0x1800000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x10000000000000L, active1, 0x4000000L);
      case 108:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 36, 19);
         return jjMoveStringLiteralDfa9_0(active0, 0x10000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa9_0(active0, 0x20000000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa9_0(active0, 0x40000000000000L, active1, 0L);
      case 114:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(8, 26, 19);
         else if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(8, 30, 19);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 39, 19);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 43, 19);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 44, 19);
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 62, 19);
         break;
      case 116:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(8, 31, 19);
         else if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(8, 84, 19);
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000000000000L, active1, 0x1000100L);
      case 120:
         return jjMoveStringLiteralDfa9_0(active0, 0x400000000000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa9_0(active0, 0x20000200000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1);
}
static private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1);
      return 9;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa10_0(active0, 0x2000000000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x1000000L);
      case 101:
         return jjMoveStringLiteralDfa10_0(active0, 0x10000000L, active1, 0x100L);
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x8000000L);
      case 108:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 56, 19);
         else if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(9, 76, 19);
         break;
      case 112:
         return jjMoveStringLiteralDfa10_0(active0, 0x20400200000000L, active1, 0L);
      case 114:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 54, 19);
         return jjMoveStringLiteralDfa10_0(active0, 0x1800000000000L, active1, 0L);
      case 116:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(9, 29, 19);
         return jjMoveStringLiteralDfa10_0(active0, 0x10000000000000L, active1, 0x800000L);
      case 120:
         return jjMoveStringLiteralDfa10_0(active0, 0x1000000000000000L, active1, 0x400000L);
      case 122:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1);
}
static private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(8, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1);
      return 10;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa11_0(active0, 0x800010000000L, active1, 0L);
      case 84:
         return jjMoveStringLiteralDfa11_0(active0, 0x1000000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(10, 33, 19);
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 53, 19);
         return jjMoveStringLiteralDfa11_0(active0, 0x10000000000000L, active1, 0x4000000L);
      case 109:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x800000L);
      case 112:
         return jjMoveStringLiteralDfa11_0(active0, 0x1000000000000000L, active1, 0x400000L);
      case 114:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 46, 19);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x100L);
      case 115:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x8000000L);
      case 116:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x1000000L);
      case 120:
         return jjMoveStringLiteralDfa11_0(active0, 0x2000000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1);
}
static private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(9, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1);
      return 11;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x100L);
      case 100:
         if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(11, 90, 19);
         break;
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x1000000L);
      case 112:
         return jjMoveStringLiteralDfa12_0(active0, 0x2000000000000000L, active1, 0L);
      case 114:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 60, 19);
         else if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(11, 86, 19);
         return jjMoveStringLiteralDfa12_0(active0, 0x10000000000000L, active1, 0L);
      case 116:
         if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(11, 87, 19);
         else if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(11, 91, 19);
         break;
      case 120:
         return jjMoveStringLiteralDfa12_0(active0, 0x800010000000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa12_0(active0, 0x1000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1);
}
static private int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(10, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, active1);
      return 12;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa13_0(active0, 0x10000000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x1000000L);
      case 108:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(12, 72, 19);
         break;
      case 112:
         return jjMoveStringLiteralDfa13_0(active0, 0x1800010000000L, active1, 0L);
      case 114:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 61, 19);
         break;
      default :
         break;
   }
   return jjStartNfa_0(11, active0, active1);
}
static private int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(11, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, active1);
      return 13;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x1000000L);
      case 101:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 48, 19);
         break;
      case 108:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 52, 19);
         break;
      case 114:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(13, 28, 19);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 47, 19);
         break;
      default :
         break;
   }
   return jjStartNfa_0(12, active0, active1);
}
static private int jjMoveStringLiteralDfa14_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(12, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, 0L, active1);
      return 14;
   }
   switch(curChar)
   {
      case 118:
         return jjMoveStringLiteralDfa15_0(active1, 0x1000000L);
      default :
         break;
   }
   return jjStartNfa_0(13, 0L, active1);
}
static private int jjMoveStringLiteralDfa15_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(13, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, 0L, active1);
      return 15;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa16_0(active1, 0x1000000L);
      default :
         break;
   }
   return jjStartNfa_0(14, 0L, active1);
}
static private int jjMoveStringLiteralDfa16_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(14, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, 0L, active1);
      return 16;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa17_0(active1, 0x1000000L);
      default :
         break;
   }
   return jjStartNfa_0(15, 0L, active1);
}
static private int jjMoveStringLiteralDfa17_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(15, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, 0L, active1);
      return 17;
   }
   switch(curChar)
   {
      case 100:
         if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(17, 88, 19);
         break;
      default :
         break;
   }
   return jjStartNfa_0(16, 0L, active1);
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 22;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 100)
                        kind = 100;
                     jjCheckNAdd(5);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 100)
                        kind = 100;
                     jjCheckNAdd(21);
                  }
                  else if (curChar == 36)
                  {
                     if (kind > 104)
                        kind = 104;
                     jjCheckNAdd(19);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(0, 2);
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 2;
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 0:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if ((0xffff7fffffffffffL & l) != 0L && kind > 94)
                     kind = 94;
                  break;
               case 2:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 4:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 100)
                     kind = 100;
                  jjCheckNAdd(5);
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 100)
                     kind = 100;
                  jjCheckNAdd(5);
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 102)
                     kind = 102;
                  jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 8:
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 9:
                  if (curChar == 34)
                     jjCheckNAddStates(0, 2);
                  break;
               case 10:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 12:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 13:
                  if (curChar == 34 && kind > 103)
                     kind = 103;
                  break;
               case 14:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(3, 6);
                  break;
               case 15:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 16:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 17:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(15);
                  break;
               case 18:
                  if (curChar != 36)
                     break;
                  if (kind > 104)
                     kind = 104;
                  jjCheckNAdd(19);
                  break;
               case 19:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 104)
                     kind = 104;
                  jjCheckNAdd(19);
                  break;
               case 20:
                  if (curChar != 48)
                     break;
                  if (kind > 100)
                     kind = 100;
                  jjCheckNAdd(21);
                  break;
               case 21:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 101)
                     kind = 101;
                  jjCheckNAdd(21);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
               case 19:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 104)
                     kind = 104;
                  jjCheckNAdd(19);
                  break;
               case 1:
                  if (kind > 94)
                     kind = 94;
                  break;
               case 6:
                  if (curChar == 120)
                     jjCheckNAdd(7);
                  break;
               case 7:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 102)
                     kind = 102;
                  jjCheckNAdd(7);
                  break;
               case 10:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 11:
                  if (curChar == 92)
                     jjAddStates(7, 9);
                  break;
               case 12:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 94)
                     kind = 94;
                  break;
               case 10:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(0, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 22 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static private int jjMoveStringLiteralDfa0_3()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_3(0x400000000L);
      default :
         return 1;
   }
}
static private int jjMoveStringLiteralDfa1_3(long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active1 & 0x400000000L) != 0L)
            return jjStopAtPos(1, 98);
         break;
      default :
         return 2;
   }
   return 2;
}
static private int jjMoveStringLiteralDfa0_1()
{
   return jjMoveNfa_1(0, 0);
}
static private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 96)
                        kind = 96;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 96)
                     kind = 96;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static private int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_2(0x200000000L);
      default :
         return 1;
   }
}
static private int jjMoveStringLiteralDfa1_2(long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active1 & 0x200000000L) != 0L)
            return jjStopAtPos(1, 97);
         break;
      default :
         return 2;
   }
   return 2;
}
static final int[] jjnextStates = {
   10, 11, 13, 10, 11, 15, 13, 12, 14, 16, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, "\50", "\51", "\41", "\52", "\54", "\55", 
"\56", "\53", "\57", "\73", "\74", "\75", "\76", "\133", "\135", "\173", "\175", 
"\101\142\163\171\156", "\101\144\144\105\170\160\162", "\101\156\144\105\170\160\162", 
"\101\162\162\141\171\105\170\160\162", "\101\162\162\141\171\124\171\160\145", 
"\101\163\163\151\147\156\141\142\154\145\105\170\160\162", "\101\163\163\151\147\156\123\164\155\164", 
"\102\151\156\117\160\105\170\160\162", "\102\154\157\143\153\123\164\155\164", "\142\157\157\154\145\141\156", 
"\102\157\157\154\145\141\156\124\171\160\145", "\103\141\154\154\105\170\160\162", "\143\154\141\163\163", 
"\103\154\141\163\163\104\145\143\154", "\104\151\166\105\170\160\162", "\145\154\163\145", 
"\105\161\165\141\154\105\170\160\162", "\105\170\160\162", "\145\170\164\145\156\144\163", "\146\141\154\163\145", 
"\106\141\154\163\145\105\170\160\162", "\106\151\145\154\144\105\170\160\162", "\106\157\162\155\141\154", 
"\107\162\145\141\164\145\162\105\170\160\162", "\111\144\145\156\164\151\146\151\145\162\105\170\160\162", 
"\111\144\145\156\164\151\146\151\145\162\124\171\160\145", "\151\146", "\111\146\123\164\155\164", "\151\156\164", 
"\111\156\164\145\147\145\162\114\151\164\145\162\141\154", "\111\156\164\145\147\145\162\124\171\160\145", 
"\114\145\163\163\145\162\105\170\160\162", "\155\141\151\156", "\115\145\164\150\157\144\104\145\143\154", 
"\115\165\154\105\170\160\162", "\116\145\147\105\170\160\162", "\156\145\167", 
"\116\145\167\101\162\162\141\171\105\170\160\162", "\116\145\167\117\142\152\145\143\164\105\170\160\162", 
"\116\157\164\105\161\105\170\160\162", "\116\157\164\105\170\160\162", "\116\165\154\154\105\170\160\162", 
"\117\162\105\170\160\162", "\120\162\157\147\162\141\155", "\160\165\142\154\151\143", 
"\162\145\164\165\162\156", "\163\164\141\164\151\143", "\123\164\155\164", "\123\164\162\151\156\147", 
"\123\164\162\151\156\147\114\151\164\145\162\141\154", "\123\165\142\105\170\160\162", "\164\150\151\163", 
"\124\150\151\163\105\170\160\162", "\124\150\162\145\141\144\104\145\143\154", "\164\162\165\145", 
"\124\162\165\145\105\170\160\162", "\124\171\160\145", "\126\141\162\104\145\143\154", "\166\157\151\144", 
"\126\157\151\144\104\145\143\154", "\167\150\151\154\145", "\127\150\151\154\145\123\164\155\164", 
"\130\151\156\165", "\130\151\156\165\103\141\154\154\105\170\160\162", 
"\130\151\156\165\103\141\154\154\123\164\155\164", "\160\165\142\154\151\143\137\163\164\141\164\151\143\137\166\157\151\144", 
"\124\150\162\145\141\144", "\163\171\156\143\150\162\157\156\151\172\145\144", 
"\101\142\163\164\162\141\143\164\114\151\163\164", "\156\165\154\154", null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, "\46\46", "\75\75", "\41\75", "\174\174", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "IN_SINGLE_LINE_COMMENT",
   "IN_FORMAL_COMMENT",
   "IN_MULTI_LINE_COMMENT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 2, 3, 0, 0, 0, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xffffffffffffffc1L, 0xf1f01fffffffL, 
};
static final long[] jjtoSkip = {
   0x3eL, 0x80700000000L, 
};
static final long[] jjtoSpecial = {
   0x0L, 0x700000000L, 
};
static final long[] jjtoMore = {
   0x0L, 0x8e0000000L, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[22];
static private final int[] jjstateSet = new int[44];
private static final StringBuffer jjimage = new StringBuffer();
private static StringBuffer image = jjimage;
private static int jjimageLen;
private static int lengthOfMatch;
static protected char curChar;
/** Constructor. */
public ParserTokenManager(SimpleCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}

/** Constructor. */
public ParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 22; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
static public void SwitchTo(int lexState)
{
   if (lexState >= 4 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         if (jjmatchedPos == 0 && jjmatchedKind > 107)
         {
            jjmatchedKind = 107;
         }
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 99)
         {
            jjmatchedKind = 99;
         }
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         if (jjmatchedPos == 0 && jjmatchedKind > 99)
         {
            jjmatchedKind = 99;
         }
         break;
       case 3:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         if (jjmatchedPos == 0 && jjmatchedKind > 99)
         {
            jjmatchedKind = 99;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        MoreLexicalActions();
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

static void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 107 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
           error("Illegal token");
         break;
      default :
         break;
   }
}
static void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      case 94 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                   input_stream.backup(1);
         break;
      default :
         break;
   }
}
static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
